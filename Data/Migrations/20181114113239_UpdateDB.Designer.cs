// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Models.LuoKiPetModels;

namespace Models.Migrations
{
    [DbContext(typeof(LuoKiPetContext))]
    [Migration("20181114113239_UpdateDB")]
    partial class UpdateDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Models.LuoKiPetModels.ActiveWork", b =>
                {
                    b.Property<int>("ActiveWorkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ActiveWorkID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ForActiveId")
                        .HasColumnName("For_ActiveID");

                    b.Property<string>("Introduce")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Photo")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("SupportNum")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("WorkTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("WorkUserId")
                        .HasColumnName("WorkUserID");

                    b.Property<string>("WorkUserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("ActiveWorkId");

                    b.HasIndex("WorkUserId");

                    b.ToTable("ActiveWork");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.Administrators", b =>
                {
                    b.Property<int>("AdministratorsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AdministratorsID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("AdministratorsId");

                    b.ToTable("Administrators");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.AnimalCategory", b =>
                {
                    b.Property<int>("AnimalCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AnimalCategoryID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnimalCategoryName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.HasKey("AnimalCategoryId");

                    b.ToTable("AnimalCategory");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.AnimalFengLei", b =>
                {
                    b.Property<int>("AnimalFengLeiId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AnimalFengLei_ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AnimalCategoryId")
                        .HasColumnName("AnimalCategoryID");

                    b.Property<string>("AnimalFengLei1")
                        .IsRequired()
                        .HasColumnName("AnimalFengLei")
                        .HasMaxLength(50);

                    b.HasKey("AnimalFengLeiId");

                    b.ToTable("AnimalFengLei");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.AppPetArticle", b =>
                {
                    b.Property<int>("ArticleId")
                        .HasColumnName("ArticleID");

                    b.Property<int?>("ArticleCategoryId")
                        .HasColumnName("ArticleCategoryID");

                    b.Property<string>("ArticleContent")
                        .IsUnicode(false);

                    b.Property<string>("ArticleCove")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int?>("ArticleCreateUserId")
                        .HasColumnName("ArticleCreateUserID");

                    b.Property<DateTime?>("ArticlePublish")
                        .HasColumnType("datetime");

                    b.Property<string>("ArticleSubtitle")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("ArticleTitle")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("ArticleId");

                    b.ToTable("AppPetArticle");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.Area", b =>
                {
                    b.Property<int>("AreaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AreaID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AreaForCityId")
                        .HasColumnName("AreaForCityID");

                    b.Property<string>("AreaName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("AreaId");

                    b.HasIndex("AreaForCityId");

                    b.ToTable("Area");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.ArticleCategory", b =>
                {
                    b.Property<int>("ArticleCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ArticleCategoryID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArticleNmae")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("ArticleCategoryId");

                    b.ToTable("ArticleCategory");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.ArticleOperation", b =>
                {
                    b.Property<int>("ArticleOperationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ArticleOperationID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ArticleCategoryId")
                        .HasColumnName("ArticleCategoryID");

                    b.Property<int?>("ArticleId")
                        .HasColumnName("ArticleID");

                    b.Property<int?>("Type");

                    b.Property<int?>("UserId")
                        .HasColumnName("UserID");

                    b.HasKey("ArticleOperationId");

                    b.ToTable("ArticleOperation");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CityID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CityName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("CityId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.ClassArticle", b =>
                {
                    b.Property<int>("ArticleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ArticleID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ArticleCategoryId")
                        .HasColumnName("ArticleCategoryID");

                    b.Property<string>("ArticleTitle")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("BrowserNum")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Content");

                    b.Property<int?>("CreateUserId")
                        .HasColumnName("CreateUserID");

                    b.Property<string>("Introduce")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int?>("IsHot");

                    b.Property<int?>("IsManager");

                    b.Property<string>("Photo")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("PublishTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("ArticleId");

                    b.HasIndex("CreateUserId");

                    b.ToTable("ClassArticle");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.ClassArticleCollection", b =>
                {
                    b.Property<int>("CollectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CollectionID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ArticleId")
                        .HasColumnName("ArticleID");

                    b.Property<DateTime?>("Time")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("UserId")
                        .HasColumnName("UserID");

                    b.HasKey("CollectionId");

                    b.HasIndex("ArticleId");

                    b.HasIndex("UserId");

                    b.ToTable("ClassArticleCollection");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CommentID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CommentCategoryId")
                        .HasColumnName("CommentCategoryID");

                    b.Property<string>("CommentContent")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int?>("CommentTargetId")
                        .HasColumnName("CommentTargetID");

                    b.Property<DateTime?>("CommentTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("CommentUserId")
                        .HasColumnName("CommentUserID");

                    b.HasKey("CommentId");

                    b.HasIndex("CommentCategoryId");

                    b.HasIndex("CommentUserId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.CommentCategory", b =>
                {
                    b.Property<int>("CommentCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CommentCategoryID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CommentTargetName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("CommentCategoryId");

                    b.ToTable("CommentCategory");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.Commodity", b =>
                {
                    b.Property<int>("CommodityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Commodity_Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AnimalCategoryId")
                        .HasColumnName("AnimalCategoryID");

                    b.Property<int?>("AnimalFengLeiId")
                        .HasColumnName("AnimalFengLei_ID");

                    b.Property<string>("CommodityContent")
                        .HasColumnName("Commodity_Content")
                        .IsUnicode(false);

                    b.Property<string>("CommodityName")
                        .IsRequired()
                        .HasColumnName("Commodity_Name")
                        .HasMaxLength(50);

                    b.Property<string>("CommodityP1")
                        .IsRequired()
                        .HasColumnName("Commodity_P1");

                    b.Property<string>("CommodityP2")
                        .HasColumnName("Commodity_P2");

                    b.Property<string>("CommodityP3")
                        .HasColumnName("Commodity_P3");

                    b.Property<string>("CommodityP4")
                        .HasColumnName("Commodity_P4");

                    b.Property<decimal>("CommodityPrice")
                        .HasColumnName("Commodity_Price")
                        .HasColumnType("numeric(10, 2)");

                    b.Property<string>("CommodityS1")
                        .HasColumnName("Commodity_S1");

                    b.Property<string>("CommodityS2")
                        .HasColumnName("Commodity_S2");

                    b.Property<string>("CommodityS3")
                        .HasColumnName("Commodity_S3");

                    b.Property<string>("CommoditySummary")
                        .IsRequired()
                        .HasColumnName("Commodity_Summary")
                        .HasMaxLength(160);

                    b.HasKey("CommodityId");

                    b.ToTable("Commodity");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.DeliveryAddress", b =>
                {
                    b.Property<int>("DeliveryAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DeliveryAddress_Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DeliveryAddressAddress")
                        .HasColumnName("DeliveryAddress_Address");

                    b.Property<string>("DeliveryAddressName")
                        .HasColumnName("DeliveryAddress_Name")
                        .HasMaxLength(10);

                    b.Property<string>("DeliveryAddressNumber")
                        .IsRequired()
                        .HasColumnName("DeliveryAddress_Number")
                        .HasMaxLength(50);

                    b.Property<string>("DeliveryAddressRegion")
                        .HasColumnName("DeliveryAddress_Region")
                        .HasMaxLength(10);

                    b.Property<string>("DeliveryAddressZipcode")
                        .HasColumnName("DeliveryAddress_Zipcode")
                        .HasMaxLength(10);

                    b.Property<int?>("UserId")
                        .HasColumnName("UserID");

                    b.HasKey("DeliveryAddressId");

                    b.ToTable("DeliveryAddress");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.EnCategory", b =>
                {
                    b.Property<int>("EnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EnID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EnName")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.HasKey("EnId");

                    b.ToTable("EnCategory");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.FindLostPet", b =>
                {
                    b.Property<int>("FindLostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FindLostID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Fcontent")
                        .HasColumnName("FContent")
                        .IsUnicode(false);

                    b.Property<int?>("ForLostId")
                        .HasColumnName("For_LostID");

                    b.Property<string>("Fphone")
                        .HasColumnName("FPhone")
                        .HasMaxLength(11)
                        .IsUnicode(false);

                    b.Property<int?>("FuserId")
                        .HasColumnName("FUserID");

                    b.HasKey("FindLostId");

                    b.ToTable("FindLostPet");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.FindPickPet", b =>
                {
                    b.Property<int>("FindPickId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FindPickID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Fcontent")
                        .HasColumnName("FContent")
                        .IsUnicode(false);

                    b.Property<int?>("ForPickId")
                        .HasColumnName("For_PickID");

                    b.Property<string>("Fphone")
                        .HasColumnName("FPhone")
                        .HasMaxLength(11)
                        .IsUnicode(false);

                    b.Property<int?>("FuserId")
                        .HasColumnName("FUserID");

                    b.HasKey("FindPickId");

                    b.ToTable("FindPickPet");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.FwshopComment", b =>
                {
                    b.Property<int>("FwshopCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FWShopCommentID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CommentContent")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int?>("CommentUserId")
                        .HasColumnName("CommentUserID");

                    b.Property<int?>("ForPackageId")
                        .HasColumnName("For_PackageID");

                    b.Property<int?>("ForServiceProjectId")
                        .HasColumnName("For_ServiceProjectID");

                    b.Property<int?>("ForShopId")
                        .HasColumnName("For_ShopID");

                    b.Property<double?>("Score");

                    b.HasKey("FwshopCommentId");

                    b.HasIndex("CommentUserId");

                    b.HasIndex("ForPackageId");

                    b.HasIndex("ForServiceProjectId");

                    b.HasIndex("ForShopId");

                    b.ToTable("FWShopComment");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.GetPet", b =>
                {
                    b.Property<int>("GetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("GetID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Age");

                    b.Property<string>("Feature")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("Flag")
                        .HasColumnName("flag");

                    b.Property<string>("GetContent")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("GetPic")
                        .IsUnicode(false);

                    b.Property<int?>("GetUserId")
                        .HasColumnName("GetUserID");

                    b.Property<string>("Gname")
                        .HasColumnName("GName")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Gphone")
                        .HasColumnName("GPhone")
                        .HasMaxLength(11)
                        .IsUnicode(false);

                    b.Property<string>("HairColor")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int?>("HasInject");

                    b.Property<int?>("PetCategoryId")
                        .HasColumnName("PetCategoryID");

                    b.Property<string>("PetName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("PubArea")
                        .IsUnicode(false);

                    b.Property<DateTime?>("PubTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("PutUserId")
                        .HasColumnName("PutUserID");

                    b.Property<int?>("Sex");

                    b.HasKey("GetId");

                    b.HasIndex("GetUserId");

                    b.HasIndex("PetCategoryId");

                    b.ToTable("GetPet");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.LostPet", b =>
                {
                    b.Property<int>("LostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LostID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Age");

                    b.Property<int?>("Flag")
                        .HasColumnName("flag");

                    b.Property<string>("HairColor")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int?>("HasBrand");

                    b.Property<string>("Ldescription")
                        .HasColumnName("LDescription")
                        .HasMaxLength(400)
                        .IsUnicode(false);

                    b.Property<string>("Lname")
                        .HasColumnName("LName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("LostContent")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("LostPic")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("LostTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("LostUserId")
                        .HasColumnName("LostUserID");

                    b.Property<string>("Lphone")
                        .HasColumnName("LPhone")
                        .HasMaxLength(11)
                        .IsUnicode(false);

                    b.Property<int?>("PetCategoryId")
                        .HasColumnName("PetCategoryID");

                    b.Property<string>("PetName")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("PubArea")
                        .IsUnicode(false);

                    b.Property<DateTime?>("PubTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("PutUserId")
                        .HasColumnName("PutUserID");

                    b.Property<int?>("Sex");

                    b.HasKey("LostId");

                    b.HasIndex("LostUserId");

                    b.HasIndex("PetCategoryId");

                    b.ToTable("LostPet");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.LoveShowPhotos", b =>
                {
                    b.Property<int>("LoveShowPhotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LoveShowPhotoID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ArticleCategoryId")
                        .HasColumnName("ArticleCategoryID");

                    b.Property<int?>("BrowseNum")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("GiveZanNum")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Image1")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Image2")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Image3")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Image4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Image5")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Image6")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("LspCategoryId")
                        .HasColumnName("LspCategoryID");

                    b.Property<string>("LspContent")
                        .IsUnicode(false);

                    b.Property<int?>("LspCreateUserId")
                        .HasColumnName("LspCreateUserID");

                    b.Property<string>("LspTitle")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<string>("PhotoList")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.HasKey("LoveShowPhotoId");

                    b.HasIndex("ArticleCategoryId");

                    b.ToTable("LoveShowPhotos");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.LoveShowVideos", b =>
                {
                    b.Property<int>("LoveShowVideoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LoveShowVideoID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ArticleCategoryId")
                        .HasColumnName("ArticleCategoryID");

                    b.Property<DateTime?>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("GiveZanNum")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("LsvBrowseNum")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("LsvCategoryId")
                        .HasColumnName("LsvCategoryID");

                    b.Property<string>("LsvCotent")
                        .IsUnicode(false);

                    b.Property<int>("LsvReleaseUserId")
                        .HasColumnName("LsvReleaseUserID");

                    b.Property<string>("LsvTitle")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("LsvVideo")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("LoveShowVideoId");

                    b.HasIndex("ArticleCategoryId");

                    b.ToTable("LoveShowVideos");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.LuoKiShop", b =>
                {
                    b.Property<int>("ShopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ShopID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FitPet")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("ForPetCategory")
                        .HasColumnName("For_PetCategory");

                    b.Property<int?>("ForShopCategory")
                        .HasColumnName("For_ShopCategory");

                    b.Property<string>("MainComponent")
                        .HasMaxLength(400)
                        .IsUnicode(false);

                    b.Property<double?>("MarketPrice");

                    b.Property<int?>("SaleSum")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ShopBigIntro")
                        .IsUnicode(false);

                    b.Property<string>("ShopBrand")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ShopGuiGe")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ShopImg1")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("ShopImg2")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("ShopImg3")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("ShopImg4")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("ShopImg5")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<byte[]>("ShopImg6");

                    b.Property<string>("ShopIntroduce")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("ShopName")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<double?>("ShopPrice");

                    b.Property<string>("ShopUrl")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("VideoSrc")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("ShopId");

                    b.ToTable("LuoKiShop");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.ManageMenu", b =>
                {
                    b.Property<int>("ManageMenuID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DataName")
                        .HasColumnName("DataName");

                    b.Property<string>("MenuIcon")
                        .HasColumnName("MenuIcon");

                    b.Property<string>("MenuName")
                        .HasColumnName("MenuName");

                    b.HasKey("ManageMenuID");

                    b.ToTable("ManageMenu");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.ManagerMenuChild", b =>
                {
                    b.Property<int>("ManagerMenuChildID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DataName")
                        .HasColumnName("DataName");

                    b.Property<int?>("ForMenuID")
                        .HasColumnName("ForMenuID");

                    b.Property<string>("MenuChildHref")
                        .HasColumnName("MenuChildHref");

                    b.Property<string>("MenuChildName")
                        .HasColumnName("MenuChildName");

                    b.HasKey("ManagerMenuChildID");

                    b.ToTable("ManagerMenuChild");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.Marea", b =>
                {
                    b.Property<int>("AreaId");

                    b.Property<string>("AreaEn")
                        .HasColumnName("AreaEN")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("AreaName")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int?>("ForCityId")
                        .HasColumnName("ForCityID");

                    b.HasKey("AreaId");

                    b.ToTable("MArea");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.Mcity", b =>
                {
                    b.Property<int>("CityId");

                    b.Property<string>("CityEn")
                        .HasColumnName("CityEN")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("CityName")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("CityId");

                    b.ToTable("MCity");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.MemPet", b =>
                {
                    b.Property<int>("MemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MemID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MemAffair")
                        .HasMaxLength(2000)
                        .IsUnicode(false);

                    b.Property<string>("MemAgent")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("MemArea")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("MemGroup")
                        .HasMaxLength(400)
                        .IsUnicode(false);

                    b.Property<string>("MemName")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("MemPhone")
                        .HasMaxLength(11)
                        .IsUnicode(false);

                    b.Property<string>("MemPhoto")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("MemPic")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("MemUserId")
                        .HasColumnName("MemUserID");

                    b.HasKey("MemId");

                    b.HasIndex("MemUserId");

                    b.ToTable("MemPet");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.Mnode", b =>
                {
                    b.Property<int>("NodeId");

                    b.Property<string>("FirstEn")
                        .HasColumnName("FirstEN")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<int?>("ForAreaId")
                        .HasColumnName("ForAreaID");

                    b.Property<int?>("ForCityId")
                        .HasColumnName("ForCityID");

                    b.Property<string>("NodeName")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("NodeId");

                    b.ToTable("MNode");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.MpetServiceShop", b =>
                {
                    b.Property<int>("ShopId")
                        .HasColumnName("Shop_id");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("BusinessHours")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Car")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<double?>("Distance");

                    b.Property<double?>("Evaluate");

                    b.Property<int?>("ForAreaId")
                        .HasColumnName("ForAreaID");

                    b.Property<int?>("ForCityId")
                        .HasColumnName("ForCityID");

                    b.Property<int?>("ForNodeId")
                        .HasColumnName("ForNodeID");

                    b.Property<double>("Lat")
                        .HasColumnName("lat");

                    b.Property<double>("Lng")
                        .HasColumnName("lng");

                    b.Property<double?>("MinPrice");

                    b.Property<string>("Node")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("SaleNum");

                    b.Property<string>("ShopImg")
                        .IsUnicode(false);

                    b.Property<string>("ShopIntroduce")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<string>("ShopName")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("ShopPhone")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("WiFi")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("ShopId");

                    b.ToTable("MPetServiceShop");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.MpetServiceShopOrder", b =>
                {
                    b.Property<int>("MshopServiceOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MShopServiceOrderID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("ActualPrice");

                    b.Property<double?>("BoQiBean");

                    b.Property<DateTime?>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("CreateUserId")
                        .HasColumnName("CreateUserID");

                    b.Property<string>("OrderNumber")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("OrderServiceNum");

                    b.Property<int?>("OrderState");

                    b.Property<double?>("OrderTolatPrice");

                    b.Property<int?>("OrderUseState")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("OrderUserPhone")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("OrderVoucheCode")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("ShopId")
                        .HasColumnName("ShopID");

                    b.Property<string>("ShopName")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<double?>("YouHuiQuan");

                    b.HasKey("MshopServiceOrderId");

                    b.ToTable("MPetServiceShopOrder");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.MservicePackage", b =>
                {
                    b.Property<int>("PackageId");

                    b.Property<int?>("ForServiceId")
                        .HasColumnName("ForServiceID");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<double?>("Oldprice");

                    b.Property<double?>("Sprice")
                        .HasColumnName("sprice");

                    b.HasKey("PackageId");

                    b.ToTable("MServicePackage");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.MserviceShopOrderDetails", b =>
                {
                    b.Property<int>("OrderDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OrderDetailsID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DetailsUserState")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("ForOrderId")
                        .HasColumnName("ForOrderID");

                    b.Property<double?>("OnePrice");

                    b.Property<int?>("PackageId")
                        .HasColumnName("PackageID");

                    b.Property<string>("PackageName")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("ServiceId")
                        .HasColumnName("ServiceID");

                    b.Property<string>("ServiceName")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("ServiceNum");

                    b.HasKey("OrderDetailsId");

                    b.ToTable("MServiceShopOrderDetails");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.MshopService", b =>
                {
                    b.Property<int>("ServiceId");

                    b.Property<int?>("ForServiceCateId")
                        .HasColumnName("ForServiceCateID");

                    b.Property<string>("ForServiceCateName")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int?>("ForShopId")
                        .HasColumnName("ForShopID");

                    b.Property<double?>("MinPrice");

                    b.Property<double?>("OldPrice");

                    b.Property<int?>("SaleNum");

                    b.Property<string>("ServiceName")
                        .HasMaxLength(60)
                        .IsUnicode(false);

                    b.HasKey("ServiceId");

                    b.ToTable("MShopService");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.MshopServiceCate", b =>
                {
                    b.Property<int>("CateId");

                    b.Property<string>("CateName")
                        .HasMaxLength(10);

                    b.HasKey("CateId");

                    b.ToTable("MShopServiceCate");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.PetActive", b =>
                {
                    b.Property<int>("PetActiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PetActiveID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActiveTitle")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Content")
                        .IsUnicode(false);

                    b.Property<DateTime?>("PetActiveTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Photo")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("PetActiveId");

                    b.ToTable("PetActive");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.PetCategory", b =>
                {
                    b.Property<int>("PetCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PetCategoryID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("AniMalCategoryId")
                        .HasColumnName("AniMalCategoryID");

                    b.Property<int?>("AppearanceLevel")
                        .HasColumnName("Appearance_Level");

                    b.Property<string>("BaseInfo")
                        .HasColumnName("Base_Info");

                    b.Property<int?>("CallLevel")
                        .HasColumnName("Call_Level");

                    b.Property<int?>("CanTrainLevel")
                        .HasColumnName("CanTrain_Level");

                    b.Property<int?>("CareNeeds")
                        .HasColumnName("Care_needs");

                    b.Property<int?>("ColdResistance")
                        .HasColumnName("Cold_resistance");

                    b.Property<string>("EnName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("ExerciseLevel")
                        .HasColumnName("Exercise_Level");

                    b.Property<int?>("FeedDifficulty")
                        .HasColumnName("Feed_difficulty");

                    b.Property<int?>("FriendlyLevel")
                        .HasColumnName("Friendly_Level");

                    b.Property<string>("Function")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("GluttonousLevel")
                        .HasColumnName("Gluttonous_Level");

                    b.Property<int?>("GuJiaLevel")
                        .HasColumnName("GuJia_Level");

                    b.Property<string>("Hair")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("HairColor")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("HairfallingLevel")
                        .HasColumnName("Hairfalling_Level");

                    b.Property<int?>("HeatResistance")
                        .HasColumnName("Heat_resistance");

                    b.Property<string>("Height")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Intelligence")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("NeedCare")
                        .HasColumnName("Need_Care");

                    b.Property<string>("NursKnowledge")
                        .HasColumnName("Nurs_knowledge");

                    b.Property<string>("Origin")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("PetCategoryIntroduce")
                        .IsRequired()
                        .HasColumnName("PetCategory_Introduce")
                        .HasMaxLength(400)
                        .IsUnicode(false);

                    b.Property<string>("PetCategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("PetCategoryPhotos")
                        .IsRequired()
                        .HasColumnName("PetCategory_Photos")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Price")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Shape")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<int?>("StickyLevel")
                        .HasColumnName("Sticky_Level");

                    b.Property<int?>("TasteLevel")
                        .HasColumnName("Taste_Level");

                    b.Property<string>("VarietyCharact")
                        .HasColumnName("Variety_charact");

                    b.Property<string>("Weight")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("PetCategoryId");

                    b.HasIndex("AniMalCategoryId");

                    b.ToTable("PetCategory");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.PetDisease", b =>
                {
                    b.Property<int>("DiseaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DiseaseID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DiseaseCause")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<string>("DiseaseName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ForEn")
                        .HasColumnName("For-EN")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<int?>("ForPetCaegoryId")
                        .HasColumnName("For-PetCaegoryID");

                    b.Property<int?>("ForSymptomId")
                        .HasColumnName("For_SymptomID");

                    b.Property<string>("Genera")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("MainSymptom")
                        .IsUnicode(false);

                    b.Property<string>("Summary")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("Symptom")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Treatment")
                        .IsUnicode(false);

                    b.Property<int?>("Type");

                    b.Property<string>("Zdbz")
                        .HasColumnName("ZDBZ")
                        .IsUnicode(false);

                    b.HasKey("DiseaseId");

                    b.HasIndex("ForSymptomId");

                    b.ToTable("PetDisease");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.PetInformation", b =>
                {
                    b.Property<int>("PetInformationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PetInformationID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BrowserNum")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Content")
                        .IsUnicode(false);

                    b.Property<int?>("CreateUserId")
                        .HasColumnName("CreateUserID");

                    b.Property<int?>("InfoCategoryId")
                        .HasColumnName("InfoCategoryID");

                    b.Property<string>("Introduce")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int?>("IsHot")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("IsManage");

                    b.Property<string>("Photo")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<DateTime?>("PublishTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("PetInformationId");

                    b.HasIndex("CreateUserId");

                    b.ToTable("PetInformation");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.PetInformationCollection", b =>
                {
                    b.Property<int>("CollectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CollectionID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ArticleId")
                        .HasColumnName("ArticleID");

                    b.Property<DateTime?>("Time")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("UserId")
                        .HasColumnName("UserID");

                    b.HasKey("CollectionId");

                    b.HasIndex("ArticleId");

                    b.HasIndex("UserId");

                    b.ToTable("PetInformationCollection");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.PetPosition", b =>
                {
                    b.Property<int>("PetPositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PetPositionID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ForPetCategoryId")
                        .HasColumnName("For_PetCategoryID");

                    b.Property<string>("PetPositionName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("PetPositionId");

                    b.ToTable("PetPosition");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.PetPositionSymptom", b =>
                {
                    b.Property<int>("PetPositionSymptomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PetPositionSymptomID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Describe")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int?>("ForPetPositionId")
                        .HasColumnName("For_PetPositionID");

                    b.Property<string>("SymptomName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("PetPositionSymptomId");

                    b.HasIndex("ForPetPositionId");

                    b.ToTable("PetPositionSymptom");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.PetProblem", b =>
                {
                    b.Property<int>("PetProblemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PetProblemID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BrowserNum")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("CategoryId")
                        .HasColumnName("CategoryID");

                    b.Property<string>("Content")
                        .IsUnicode(false);

                    b.Property<int?>("CreateUserId")
                        .HasColumnName("CreateUserID");

                    b.Property<int?>("IsHot");

                    b.Property<int?>("IsManage");

                    b.Property<DateTime?>("PublishTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("PetProblemId");

                    b.ToTable("PetProblem");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.PetRl", b =>
                {
                    b.Property<int>("PetRlId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PetRlID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ForGetId")
                        .HasColumnName("For_GetID");

                    b.Property<string>("Pcontent")
                        .HasColumnName("PContent")
                        .IsUnicode(false);

                    b.Property<int?>("Pisid")
                        .HasColumnName("PISID");

                    b.Property<int?>("Pislook")
                        .HasColumnName("PISLook");

                    b.Property<int?>("Pissterilisation")
                        .HasColumnName("PISSterilisation");

                    b.Property<string>("Pname")
                        .HasColumnName("PName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Pphone")
                        .HasColumnName("PPhone")
                        .HasMaxLength(11)
                        .IsUnicode(false);

                    b.Property<string>("Presidence")
                        .HasColumnName("PResidence")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Psalary")
                        .HasColumnName("PSalary")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Psex")
                        .HasColumnName("PSex");

                    b.Property<string>("Ptitle")
                        .HasColumnName("PTitle")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("RlUserId")
                        .HasColumnName("RlUserID");

                    b.HasKey("PetRlId");

                    b.HasIndex("RlUserId");

                    b.ToTable("PetRl");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.PetServiceCartDetails", b =>
                {
                    b.Property<int>("PetServiceCartDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PetServiceCartDetailID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Amount");

                    b.Property<string>("Detailed")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("ForPetServiceCartId")
                        .HasColumnName("For_PetServiceCartID");

                    b.Property<int?>("ForProjectPackageId")
                        .HasColumnName("For_ProjectPackageID");

                    b.Property<int?>("ForServiceProjectId")
                        .HasColumnName("For_ServiceProjectID");

                    b.Property<int?>("ForShopId")
                        .HasColumnName("For_ShopID");

                    b.Property<int?>("ForUserId")
                        .HasColumnName("For_UserID");

                    b.Property<double?>("Price");

                    b.HasKey("PetServiceCartDetailId");

                    b.HasIndex("ForPetServiceCartId");

                    b.HasIndex("ForProjectPackageId");

                    b.HasIndex("ForServiceProjectId");

                    b.HasIndex("ForShopId");

                    b.HasIndex("ForUserId");

                    b.ToTable("PetServiceCartDetails");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.PetServiceCarts", b =>
                {
                    b.Property<int>("PetServiceCartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PetServiceCartID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ForShopId")
                        .HasColumnName("For_ShopID");

                    b.Property<int?>("ForUserId")
                        .HasColumnName("For_UserID");

                    b.Property<int?>("ServiceAmount");

                    b.HasKey("PetServiceCartId");

                    b.HasIndex("ForShopId");

                    b.HasIndex("ForUserId");

                    b.ToTable("PetServiceCarts");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.PetServiceOrder", b =>
                {
                    b.Property<int>("PetServiceOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PetServiceOrderID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ForShopId")
                        .HasColumnName("For_ShopID");

                    b.Property<int?>("ForUserId")
                        .HasColumnName("For_UserID");

                    b.Property<string>("OrderCode")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("OrderContactPhone")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("OrderNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("OrderServiceNum");

                    b.Property<int?>("OrderState");

                    b.Property<DateTime?>("OrderTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<double?>("OrderTotalMoney");

                    b.HasKey("PetServiceOrderId");

                    b.HasIndex("ForShopId");

                    b.HasIndex("ForUserId");

                    b.ToTable("PetServiceOrder");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.PetServiceOrderDetails", b =>
                {
                    b.Property<int>("PetServiceOrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PetServiceOrderDetailID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Amount");

                    b.Property<string>("Detailed")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("ForPetServiceOrderId")
                        .HasColumnName("For_PetServiceOrderID");

                    b.Property<int?>("ForProjectPackageId")
                        .HasColumnName("For_ProjectPackageID");

                    b.Property<int?>("ForServiceProjectId")
                        .HasColumnName("For_ServiceProjectID");

                    b.Property<int?>("ForShopId")
                        .HasColumnName("For_ShopID");

                    b.Property<int?>("ForUserId")
                        .HasColumnName("For_UserID");

                    b.Property<double?>("Price");

                    b.HasKey("PetServiceOrderDetailId");

                    b.HasIndex("ForProjectPackageId");

                    b.HasIndex("ForServiceProjectId");

                    b.HasIndex("ForShopId");

                    b.HasIndex("ForUserId");

                    b.ToTable("PetServiceOrderDetails");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.PetServiceShop", b =>
                {
                    b.Property<int>("PetServiceShopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PetServiceShopID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressJwd")
                        .HasColumnName("AddressJWD")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("BusinessHours")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("ForAreaId")
                        .HasColumnName("For_AreaID");

                    b.Property<int?>("ForCityId")
                        .HasColumnName("For_CityID");

                    b.Property<int?>("ForUserId")
                        .HasColumnName("For_UserID");

                    b.Property<int?>("HasBath")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("HasCatService");

                    b.Property<int?>("HasDesigner")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("HasDogService");

                    b.Property<int?>("HasFoster")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("HasMedicalCare")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("HasMedical-Care")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("PetServiceShopName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ShopAddress")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("ShopImage1")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("ShopImage2")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("ShopImage3")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("ShopImage4")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("ShopImage5")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("ShopImage6")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("ShopPhone")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("PetServiceShopId");

                    b.HasIndex("ForAreaId");

                    b.HasIndex("ForCityId");

                    b.ToTable("PetServiceShop");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.PickPet", b =>
                {
                    b.Property<int>("PickId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PickID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Flag")
                        .HasColumnName("flag");

                    b.Property<string>("HairColor")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int?>("HasBrand");

                    b.Property<int?>("PetCategoryId")
                        .HasColumnName("PetCategoryID");

                    b.Property<string>("PickContent")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("PickPic")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("PickUserId")
                        .HasColumnName("PickUserID");

                    b.Property<string>("Pidescription")
                        .HasColumnName("PIDescription")
                        .IsUnicode(false);

                    b.Property<string>("Piname")
                        .HasColumnName("PIName")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Piphone")
                        .HasColumnName("PIPhone")
                        .HasMaxLength(11)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Pitime")
                        .HasColumnName("PITime")
                        .HasColumnType("datetime");

                    b.Property<string>("PubArea")
                        .IsUnicode(false);

                    b.Property<DateTime?>("PubTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("PutUserId")
                        .HasColumnName("PutUserID");

                    b.Property<int?>("Sex");

                    b.HasKey("PickId");

                    b.HasIndex("PetCategoryId");

                    b.HasIndex("PickUserId");

                    b.ToTable("PickPet");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.ProjectPackage", b =>
                {
                    b.Property<int>("ProjectPackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ProjectPackageID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ForProjectId")
                        .HasColumnName("For_ProjectID");

                    b.Property<int?>("ForShopId")
                        .HasColumnName("For_ShopID");

                    b.Property<string>("PackgelName")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<double?>("Price");

                    b.HasKey("ProjectPackageId");

                    b.HasIndex("ForProjectId");

                    b.ToTable("ProjectPackage");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.ReceivingAddress", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AddressID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Area")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Consignee")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DetailedNode")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("IsDefault");

                    b.Property<int?>("UserId")
                        .HasColumnName("UserID");

                    b.HasKey("AddressId");

                    b.ToTable("ReceivingAddress");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.Reply", b =>
                {
                    b.Property<int>("ReplyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ReplyID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ReplayTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("ReplyCommentId")
                        .HasColumnName("Reply_CommentID");

                    b.Property<string>("ReplyContent")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int?>("ReplyTargetId")
                        .HasColumnName("ReplyTargetID");

                    b.Property<int?>("ReplyUserId")
                        .HasColumnName("ReplyUserID");

                    b.HasKey("ReplyId");

                    b.HasIndex("ReplyCommentId");

                    b.HasIndex("ReplyTargetId");

                    b.HasIndex("ReplyUserId");

                    b.ToTable("Reply");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.ServiceCaegory", b =>
                {
                    b.Property<int>("ServiceCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Service_CategoryID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ServiceCategoryName")
                        .HasColumnName("Service_CategoryName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("ServiceCategoryId");

                    b.ToTable("ServiceCaegory");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.ServiceShopCollection", b =>
                {
                    b.Property<int>("CollectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CollectionID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ShopId")
                        .HasColumnName("ShopID");

                    b.Property<DateTime?>("Time")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("UserId")
                        .HasColumnName("UserID");

                    b.HasKey("CollectionId");

                    b.HasIndex("ShopId");

                    b.HasIndex("UserId");

                    b.ToTable("ServiceShopCollection");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.ShopCart", b =>
                {
                    b.Property<int>("ShopCartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ShopCartID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Amount");

                    b.Property<int?>("ForShopId")
                        .HasColumnName("For_ShopID");

                    b.Property<int?>("ForUserId")
                        .HasColumnName("For_UserID");

                    b.Property<string>("ShopImage")
                        .HasColumnName("Shop_Image")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("ShopNmae")
                        .HasColumnName("Shop_Nmae")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<double?>("ShopPrice")
                        .HasColumnName("Shop_Price");

                    b.HasKey("ShopCartId");

                    b.ToTable("ShopCart");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.ShopServiceProject", b =>
                {
                    b.Property<int>("ShopServicesItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ShopServicesItemID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ForShopId")
                        .HasColumnName("For_ShopID");

                    b.Property<double?>("MinPrice");

                    b.Property<int?>("SaleNum")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("ServiceCategoryId")
                        .HasColumnName("ServiceCategoryID");

                    b.Property<string>("ServiceItemName")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.HasKey("ShopServicesItemId");

                    b.HasIndex("ForShopId");

                    b.HasIndex("ServiceCategoryId");

                    b.ToTable("ShopServiceProject");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.ShopType", b =>
                {
                    b.Property<int>("ShopTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ShopTypeID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ForShopId")
                        .HasColumnName("For_ShopID");

                    b.Property<double?>("MarkPrice")
                        .HasColumnName("Mark_Price");

                    b.Property<double?>("ShopPrice")
                        .HasColumnName("Shop_Price");

                    b.Property<string>("TypeName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("ShopTypeId");

                    b.HasIndex("ForShopId");

                    b.ToTable("ShopType");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.SupportWork", b =>
                {
                    b.Property<int>("SupportWorkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SupportWorkID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ForWorkId")
                        .HasColumnName("For_WorkID");

                    b.Property<int?>("SupportUserId")
                        .HasColumnName("SupportUserID");

                    b.HasKey("SupportWorkId");

                    b.HasIndex("ForWorkId");

                    b.ToTable("SupportWork");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Age");

                    b.Property<string>("AreaName");

                    b.Property<string>("CityName");

                    b.Property<DateTime?>("CreateTime");

                    b.Property<DateTime?>("Disable");

                    b.Property<string>("Expertise")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("ForAreaId")
                        .HasColumnName("For_AreaID");

                    b.Property<int?>("ForCityId")
                        .HasColumnName("For_CityID");

                    b.Property<int?>("For_ProvinceID");

                    b.Property<int?>("Identity");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ProvinceName");

                    b.Property<string>("QqaccessToken")
                        .HasColumnName("QQAccess_Token")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("QqopenId")
                        .HasColumnName("QQOpenId")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("RegisterPhone")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Rpassword")
                        .HasColumnName("RPassword")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Sex")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('check Sex in(''男'',''女'')')")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<double?>("UserBoQiMoney")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("User_BoQiMoney")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("UserIntroduce")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("UserPhotos")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("UserState");

                    b.HasKey("UserId");

                    b.HasIndex("ForAreaId");

                    b.HasIndex("ForCityId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.UserFriendly", b =>
                {
                    b.Property<int>("FriendlyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FriendlyID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("ToUserId")
                        .HasColumnName("ToUserID");

                    b.Property<int>("UserId")
                        .HasColumnName("UserID");

                    b.HasKey("FriendlyId");

                    b.ToTable("UserFriendly");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.ActiveWork", b =>
                {
                    b.HasOne("Models.LuoKiPetModels.User", "WorkUser")
                        .WithMany("ActiveWork")
                        .HasForeignKey("WorkUserId")
                        .HasConstraintName("FK_ActiveWork_PetActive");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.Area", b =>
                {
                    b.HasOne("Models.LuoKiPetModels.City", "AreaForCity")
                        .WithMany("Area")
                        .HasForeignKey("AreaForCityId")
                        .HasConstraintName("FK_Area_City");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.ClassArticle", b =>
                {
                    b.HasOne("Models.LuoKiPetModels.User", "CreateUser")
                        .WithMany("ClassArticle")
                        .HasForeignKey("CreateUserId")
                        .HasConstraintName("FK_ClassArticle_User");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.ClassArticleCollection", b =>
                {
                    b.HasOne("Models.LuoKiPetModels.ClassArticle", "Article")
                        .WithMany("ClassArticleCollection")
                        .HasForeignKey("ArticleId")
                        .HasConstraintName("FK_ClassArticleCollection_ClassArticle");

                    b.HasOne("Models.LuoKiPetModels.User", "User")
                        .WithMany("ClassArticleCollection")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_ClassArticleCollection_User");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.Comment", b =>
                {
                    b.HasOne("Models.LuoKiPetModels.CommentCategory", "CommentCategory")
                        .WithMany("Comment")
                        .HasForeignKey("CommentCategoryId")
                        .HasConstraintName("FK_Comment_CommentCategory");

                    b.HasOne("Models.LuoKiPetModels.User", "CommentUser")
                        .WithMany("Comment")
                        .HasForeignKey("CommentUserId")
                        .HasConstraintName("FK_Comment_User");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.FwshopComment", b =>
                {
                    b.HasOne("Models.LuoKiPetModels.User", "CommentUser")
                        .WithMany("FwshopComment")
                        .HasForeignKey("CommentUserId")
                        .HasConstraintName("FK_FWShopComment_User");

                    b.HasOne("Models.LuoKiPetModels.ProjectPackage", "ForPackage")
                        .WithMany("FwshopComment")
                        .HasForeignKey("ForPackageId")
                        .HasConstraintName("FK_FWShopComment_ProjectPackage");

                    b.HasOne("Models.LuoKiPetModels.ShopServiceProject", "ForServiceProject")
                        .WithMany("FwshopComment")
                        .HasForeignKey("ForServiceProjectId")
                        .HasConstraintName("FK_FWShopComment_ShopServiceProject");

                    b.HasOne("Models.LuoKiPetModels.PetServiceShop", "ForShop")
                        .WithMany("FwshopComment")
                        .HasForeignKey("ForShopId")
                        .HasConstraintName("FK_FWShopComment_PetServiceShop");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.GetPet", b =>
                {
                    b.HasOne("Models.LuoKiPetModels.User", "GetUser")
                        .WithMany("GetPet")
                        .HasForeignKey("GetUserId")
                        .HasConstraintName("FK_GetPet_User");

                    b.HasOne("Models.LuoKiPetModels.PetCategory", "PetCategory")
                        .WithMany("GetPet")
                        .HasForeignKey("PetCategoryId")
                        .HasConstraintName("FK_GetPet_PetCategory");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.LostPet", b =>
                {
                    b.HasOne("Models.LuoKiPetModels.User", "LostUser")
                        .WithMany("LostPet")
                        .HasForeignKey("LostUserId")
                        .HasConstraintName("FK_LostPet_User");

                    b.HasOne("Models.LuoKiPetModels.PetCategory", "PetCategory")
                        .WithMany("LostPet")
                        .HasForeignKey("PetCategoryId")
                        .HasConstraintName("FK_LostPet_PetCategory");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.LoveShowPhotos", b =>
                {
                    b.HasOne("Models.LuoKiPetModels.ArticleCategory", "ArticleCategory")
                        .WithMany("LoveShowPhotos")
                        .HasForeignKey("ArticleCategoryId")
                        .HasConstraintName("FK_LoveShowPhotos_User");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.LoveShowVideos", b =>
                {
                    b.HasOne("Models.LuoKiPetModels.ArticleCategory", "ArticleCategory")
                        .WithMany("LoveShowVideos")
                        .HasForeignKey("ArticleCategoryId")
                        .HasConstraintName("FK_LoveShowVideos_User");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.MemPet", b =>
                {
                    b.HasOne("Models.LuoKiPetModels.User", "MemUser")
                        .WithMany("MemPet")
                        .HasForeignKey("MemUserId")
                        .HasConstraintName("FK_MemPet_User");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.PetCategory", b =>
                {
                    b.HasOne("Models.LuoKiPetModels.AnimalCategory", "AniMalCategory")
                        .WithMany("PetCategory")
                        .HasForeignKey("AniMalCategoryId")
                        .HasConstraintName("FK_PetCategory_AnimalCategory");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.PetDisease", b =>
                {
                    b.HasOne("Models.LuoKiPetModels.PetPositionSymptom", "ForSymptom")
                        .WithMany("PetDisease")
                        .HasForeignKey("ForSymptomId")
                        .HasConstraintName("FK_PetDisease_PetPositionSymptom");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.PetInformation", b =>
                {
                    b.HasOne("Models.LuoKiPetModels.User", "CreateUser")
                        .WithMany("PetInformation")
                        .HasForeignKey("CreateUserId")
                        .HasConstraintName("FK_PetInformation_User");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.PetInformationCollection", b =>
                {
                    b.HasOne("Models.LuoKiPetModels.PetInformation", "Article")
                        .WithMany("PetInformationCollection")
                        .HasForeignKey("ArticleId")
                        .HasConstraintName("FK_PetInformationCollection_PetInformation");

                    b.HasOne("Models.LuoKiPetModels.User", "User")
                        .WithMany("PetInformationCollection")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_PetInformationCollection_User");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.PetPositionSymptom", b =>
                {
                    b.HasOne("Models.LuoKiPetModels.PetPosition", "ForPetPosition")
                        .WithMany("PetPositionSymptom")
                        .HasForeignKey("ForPetPositionId")
                        .HasConstraintName("FK_PetPositionSymptom_PetPosition");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.PetRl", b =>
                {
                    b.HasOne("Models.LuoKiPetModels.User", "RlUser")
                        .WithMany("PetRl")
                        .HasForeignKey("RlUserId")
                        .HasConstraintName("FK_PetRl_User");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.PetServiceCartDetails", b =>
                {
                    b.HasOne("Models.LuoKiPetModels.PetServiceCarts", "ForPetServiceCart")
                        .WithMany("PetServiceCartDetails")
                        .HasForeignKey("ForPetServiceCartId")
                        .HasConstraintName("FK_PetServiceCartDetails_PetServiceCartDetails");

                    b.HasOne("Models.LuoKiPetModels.ProjectPackage", "ForProjectPackage")
                        .WithMany("PetServiceCartDetails")
                        .HasForeignKey("ForProjectPackageId")
                        .HasConstraintName("FK_PetServiceCart_ProjectPackage");

                    b.HasOne("Models.LuoKiPetModels.ShopServiceProject", "ForServiceProject")
                        .WithMany("PetServiceCartDetails")
                        .HasForeignKey("ForServiceProjectId")
                        .HasConstraintName("FK_PetServiceCart_ShopServiceProject");

                    b.HasOne("Models.LuoKiPetModels.PetServiceShop", "ForShop")
                        .WithMany("PetServiceCartDetails")
                        .HasForeignKey("ForShopId")
                        .HasConstraintName("FK_PetServiceCart_PetServiceShop1");

                    b.HasOne("Models.LuoKiPetModels.User", "ForUser")
                        .WithMany("PetServiceCartDetails")
                        .HasForeignKey("ForUserId")
                        .HasConstraintName("FK_PetServiceCart_User");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.PetServiceCarts", b =>
                {
                    b.HasOne("Models.LuoKiPetModels.PetServiceShop", "ForShop")
                        .WithMany("PetServiceCarts")
                        .HasForeignKey("ForShopId")
                        .HasConstraintName("FK_PetServiceCarts_PetServiceShop");

                    b.HasOne("Models.LuoKiPetModels.User", "ForUser")
                        .WithMany("PetServiceCarts")
                        .HasForeignKey("ForUserId")
                        .HasConstraintName("FK_PetServiceCarts_User");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.PetServiceOrder", b =>
                {
                    b.HasOne("Models.LuoKiPetModels.PetServiceShop", "ForShop")
                        .WithMany("PetServiceOrder")
                        .HasForeignKey("ForShopId")
                        .HasConstraintName("FK_PetServiceOrder_PetServiceShop");

                    b.HasOne("Models.LuoKiPetModels.User", "ForUser")
                        .WithMany("PetServiceOrder")
                        .HasForeignKey("ForUserId")
                        .HasConstraintName("FK_PetServiceOrder_User");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.PetServiceOrderDetails", b =>
                {
                    b.HasOne("Models.LuoKiPetModels.ProjectPackage", "ForProjectPackage")
                        .WithMany("PetServiceOrderDetails")
                        .HasForeignKey("ForProjectPackageId")
                        .HasConstraintName("FK_PetServiceOrderDetails_ProjectPackage");

                    b.HasOne("Models.LuoKiPetModels.ShopServiceProject", "ForServiceProject")
                        .WithMany("PetServiceOrderDetails")
                        .HasForeignKey("ForServiceProjectId")
                        .HasConstraintName("FK_PetServiceOrderDetails_ShopServiceProject");

                    b.HasOne("Models.LuoKiPetModels.PetServiceShop", "ForShop")
                        .WithMany("PetServiceOrderDetails")
                        .HasForeignKey("ForShopId")
                        .HasConstraintName("FK_PetServiceOrderDetails_PetServiceShop");

                    b.HasOne("Models.LuoKiPetModels.User", "ForUser")
                        .WithMany("PetServiceOrderDetails")
                        .HasForeignKey("ForUserId")
                        .HasConstraintName("FK_PetServiceOrderDetails_User");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.PetServiceShop", b =>
                {
                    b.HasOne("Models.LuoKiPetModels.Area", "ForArea")
                        .WithMany("PetServiceShop")
                        .HasForeignKey("ForAreaId")
                        .HasConstraintName("FK_PetServiceShop_Area");

                    b.HasOne("Models.LuoKiPetModels.City", "ForCity")
                        .WithMany("PetServiceShop")
                        .HasForeignKey("ForCityId")
                        .HasConstraintName("FK_PetServiceShop_City");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.PickPet", b =>
                {
                    b.HasOne("Models.LuoKiPetModels.PetCategory", "PetCategory")
                        .WithMany("PickPet")
                        .HasForeignKey("PetCategoryId")
                        .HasConstraintName("FK_PickPet_PetCategory");

                    b.HasOne("Models.LuoKiPetModels.User", "PickUser")
                        .WithMany("PickPet")
                        .HasForeignKey("PickUserId")
                        .HasConstraintName("FK_PickPet_User");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.ProjectPackage", b =>
                {
                    b.HasOne("Models.LuoKiPetModels.ShopServiceProject", "ForProject")
                        .WithMany("ProjectPackage")
                        .HasForeignKey("ForProjectId")
                        .HasConstraintName("FK_ProjectPackage_ShopServiceProject");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.Reply", b =>
                {
                    b.HasOne("Models.LuoKiPetModels.Comment", "ReplyComment")
                        .WithMany("Reply")
                        .HasForeignKey("ReplyCommentId")
                        .HasConstraintName("FK_Reply_Comment");

                    b.HasOne("Models.LuoKiPetModels.User", "ReplyTarget")
                        .WithMany("ReplyReplyTarget")
                        .HasForeignKey("ReplyTargetId")
                        .HasConstraintName("FK_Reply_User");

                    b.HasOne("Models.LuoKiPetModels.User", "ReplyUser")
                        .WithMany("ReplyReplyUser")
                        .HasForeignKey("ReplyUserId")
                        .HasConstraintName("FK_Reply_User1");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.ServiceShopCollection", b =>
                {
                    b.HasOne("Models.LuoKiPetModels.PetServiceShop", "Shop")
                        .WithMany("ServiceShopCollection")
                        .HasForeignKey("ShopId")
                        .HasConstraintName("FK_ServiceShopCollection_PetServiceShop");

                    b.HasOne("Models.LuoKiPetModels.User", "User")
                        .WithMany("ServiceShopCollection")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_ServiceShopCollection_User");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.ShopServiceProject", b =>
                {
                    b.HasOne("Models.LuoKiPetModels.PetServiceShop", "ForShop")
                        .WithMany("ShopServiceProject")
                        .HasForeignKey("ForShopId")
                        .HasConstraintName("FK_ShopServiceProject_PetServiceShop");

                    b.HasOne("Models.LuoKiPetModels.ServiceCaegory", "ServiceCategory")
                        .WithMany("ShopServiceProject")
                        .HasForeignKey("ServiceCategoryId")
                        .HasConstraintName("FK_ShopServiceProject_ServiceCaegory");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.ShopType", b =>
                {
                    b.HasOne("Models.LuoKiPetModels.LuoKiShop", "ForShop")
                        .WithMany("ShopType")
                        .HasForeignKey("ForShopId")
                        .HasConstraintName("FK_ShopType_LuoKiShop");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.SupportWork", b =>
                {
                    b.HasOne("Models.LuoKiPetModels.ActiveWork", "ForWork")
                        .WithMany("SupportWork")
                        .HasForeignKey("ForWorkId")
                        .HasConstraintName("FK_SupportWork_ActiveWork");
                });

            modelBuilder.Entity("Models.LuoKiPetModels.User", b =>
                {
                    b.HasOne("Models.LuoKiPetModels.Area", "ForArea")
                        .WithMany("User")
                        .HasForeignKey("ForAreaId")
                        .HasConstraintName("FK_User_Area");

                    b.HasOne("Models.LuoKiPetModels.City", "ForCity")
                        .WithMany("User")
                        .HasForeignKey("ForCityId")
                        .HasConstraintName("FK_User_City");
                });
#pragma warning restore 612, 618
        }
    }
}
